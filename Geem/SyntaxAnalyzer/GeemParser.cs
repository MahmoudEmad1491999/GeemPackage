//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Grammar/Geem.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Geem.SyntaxAnalyzer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class GeemParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, Identifer=38, 
		Number=39, Space=40;
	public const int
		RULE_program = 0, RULE_operationDeclaration = 1, RULE_globalVariableDeclaration = 2, 
		RULE_functionDeclaration = 3, RULE_expression = 4, RULE_parameter = 5, 
		RULE_statement = 6, RULE_datatype = 7;
	public static readonly string[] ruleNames = {
		"program", "operationDeclaration", "globalVariableDeclaration", "functionDeclaration", 
		"expression", "parameter", "statement", "datatype"
	};

	private static readonly string[] _LiteralNames = {
		null, "')'", "'\\u060C'", "'('", "'}'", "'{'", "'='", "'\\u061B'", "'\\u066A'", 
		"'\\u00F7'", "'\\u00D7'", "'-'", "'+'", "'<<'", "'>>'", "'>>>'", "'<'", 
		"'>='", "'>'", "'<='", "'=='", "'!='", "'&'", "'^'", "'|'", "'&&'", "'||'", 
		"'!'", "'~'", "'\\u0625\\u0630\\u0627'", "'\\u0623\\u0648\\u0625\\u0630\\u0627'", 
		"'\\u0623\\u0648'", "'\\u0637\\u0627\\u0644\\u0645\\u0627'", "'\\u062A\\u062E\\u0637\\u0649'", 
		"'\\u062A\\u062C\\u0627\\u0648\\u0632'", "'\\u0627\\u0644\\u0646\\u0627\\u062A\\u062C'", 
		"'\\u0631\\u062C\\u0648\\u0639'", "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "Identifer", "Number", "Space"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Geem.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GeemParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GeemParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GeemParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableDeclarationContext[] globalVariableDeclaration() {
			return GetRuleContexts<GlobalVariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableDeclarationContext globalVariableDeclaration(int i) {
			return GetRuleContext<GlobalVariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationDeclarationContext[] operationDeclaration() {
			return GetRuleContexts<OperationDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationDeclarationContext operationDeclaration(int i) {
			return GetRuleContext<OperationDeclarationContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Identifer) {
				{
				State = 19;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 16;
					globalVariableDeclaration();
					}
					break;
				case 2:
					{
					State = 17;
					functionDeclaration();
					}
					break;
				case 3:
					{
					State = 18;
					operationDeclaration();
					}
					break;
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public OperationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationDeclaration; } }
	}

	[RuleVersion(0)]
	public OperationDeclarationContext operationDeclaration() {
		OperationDeclarationContext _localctx = new OperationDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_operationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			datatype(0);
			State = 25;
			Match(T__0);
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifer) {
				{
				State = 26;
				parameter();
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 27;
					Match(T__1);
					State = 28;
					parameter();
					}
					}
					State = 33;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 36;
			Match(T__2);
			State = 37;
			Match(T__3);
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << Identifer))) != 0)) {
				{
				{
				State = 38;
				statement();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 44;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifer() { return GetToken(GeemParser.Identifer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GlobalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariableDeclaration; } }
	}

	[RuleVersion(0)]
	public GlobalVariableDeclarationContext globalVariableDeclaration() {
		GlobalVariableDeclarationContext _localctx = new GlobalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_globalVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			datatype(0);
			State = 47;
			Match(Identifer);
			State = 48;
			Match(T__5);
			State = 49;
			expression(0);
			State = 50;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifer() { return GetToken(GeemParser.Identifer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			datatype(0);
			State = 53;
			Match(Identifer);
			State = 54;
			Match(T__0);
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifer) {
				{
				State = 55;
				parameter();
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 56;
					Match(T__1);
					State = 57;
					parameter();
					}
					}
					State = 62;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 65;
			Match(T__2);
			State = 66;
			Match(T__3);
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << Identifer))) != 0)) {
				{
				{
				State = 67;
				statement();
				}
				}
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 73;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DivideExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivideExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class SubtractExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubtractExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class NumberExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(GeemParser.Number, 0); }
		public NumberExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class BnotExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BnotExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ShiftRightExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ShiftRightExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class BandExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BandExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class GreaterThanExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class VariableReadExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifer() { return GetToken(GeemParser.Identifer, 0); }
		public VariableReadExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class LandExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LandExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class LorExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LorExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class NotEqualExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NotEqualExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ProcedureCallExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifer() { return GetToken(GeemParser.Identifer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ProcedureCallExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class NegationExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegationExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ShiftLeftExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ShiftLeftExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class LnotExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LnotExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class LessThanExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class MultiplyExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplyExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ShiftRightArithmeticExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ShiftRightArithmeticExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ModulsExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ModulsExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class BorExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BorExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class GreaterThanOrEqualContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GreaterThanOrEqualContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class AddExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class LessThanOrEqualContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LessThanOrEqualContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class BxorExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BxorExprContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class EqualExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualExprContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new ProcedureCallExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 76;
				Match(Identifer);
				State = 77;
				Match(T__0);
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__26) | (1L << T__27) | (1L << Identifer) | (1L << Number))) != 0)) {
					{
					State = 78;
					expression(0);
					State = 83;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__1) {
						{
						{
						State = 79;
						Match(T__1);
						State = 80;
						expression(0);
						}
						}
						State = 85;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 88;
				Match(T__2);
				}
				break;
			case 2:
				{
				_localctx = new NegationExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 89;
				Match(T__10);
				State = 90;
				expression(5);
				}
				break;
			case 3:
				{
				_localctx = new LnotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 91;
				Match(T__26);
				State = 92;
				expression(4);
				}
				break;
			case 4:
				{
				_localctx = new BnotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 93;
				Match(T__27);
				State = 94;
				expression(3);
				}
				break;
			case 5:
				{
				_localctx = new VariableReadExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 95;
				Match(Identifer);
				}
				break;
			case 6:
				{
				_localctx = new NumberExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 96;
				Match(Number);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 158;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 156;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new ModulsExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 99;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 100;
						Match(T__7);
						State = 101;
						expression(26);
						}
						break;
					case 2:
						{
						_localctx = new DivideExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 102;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 103;
						Match(T__8);
						State = 104;
						expression(25);
						}
						break;
					case 3:
						{
						_localctx = new MultiplyExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 105;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 106;
						Match(T__9);
						State = 107;
						expression(24);
						}
						break;
					case 4:
						{
						_localctx = new SubtractExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 108;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 109;
						Match(T__10);
						State = 110;
						expression(23);
						}
						break;
					case 5:
						{
						_localctx = new AddExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 111;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 112;
						Match(T__11);
						State = 113;
						expression(22);
						}
						break;
					case 6:
						{
						_localctx = new ShiftLeftExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 114;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 115;
						Match(T__12);
						State = 116;
						expression(21);
						}
						break;
					case 7:
						{
						_localctx = new ShiftRightExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 117;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 118;
						Match(T__13);
						State = 119;
						expression(20);
						}
						break;
					case 8:
						{
						_localctx = new ShiftRightArithmeticExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 120;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 121;
						Match(T__14);
						State = 122;
						expression(19);
						}
						break;
					case 9:
						{
						_localctx = new GreaterThanExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 123;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 124;
						Match(T__15);
						State = 125;
						expression(18);
						}
						break;
					case 10:
						{
						_localctx = new LessThanOrEqualContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 126;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 127;
						Match(T__16);
						State = 128;
						expression(17);
						}
						break;
					case 11:
						{
						_localctx = new LessThanExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 129;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 130;
						Match(T__17);
						State = 131;
						expression(16);
						}
						break;
					case 12:
						{
						_localctx = new GreaterThanOrEqualContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 132;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 133;
						Match(T__18);
						State = 134;
						expression(15);
						}
						break;
					case 13:
						{
						_localctx = new EqualExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 135;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 136;
						Match(T__19);
						State = 137;
						expression(14);
						}
						break;
					case 14:
						{
						_localctx = new NotEqualExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 138;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 139;
						Match(T__20);
						State = 140;
						expression(13);
						}
						break;
					case 15:
						{
						_localctx = new BandExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 141;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 142;
						Match(T__21);
						State = 143;
						expression(12);
						}
						break;
					case 16:
						{
						_localctx = new BxorExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 144;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 145;
						Match(T__22);
						State = 146;
						expression(11);
						}
						break;
					case 17:
						{
						_localctx = new BorExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 147;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 148;
						Match(T__23);
						State = 149;
						expression(10);
						}
						break;
					case 18:
						{
						_localctx = new LandExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 150;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 151;
						Match(T__24);
						State = 152;
						expression(9);
						}
						break;
					case 19:
						{
						_localctx = new LorExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 153;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 154;
						Match(T__25);
						State = 155;
						expression(8);
						}
						break;
					}
					} 
				}
				State = 160;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifer() { return GetToken(GeemParser.Identifer, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 10, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			datatype(0);
			State = 162;
			Match(Identifer);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class VariableAssignmentContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifer() { return GetToken(GeemParser.Identifer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableAssignmentContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class BreakStatementContext : StatementContext {
		public BreakStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ContinueStatementContext : StatementContext {
		public ContinueStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class IfStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ReturnStatementContext : StatementContext {
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ProcedureCallStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifer() { return GetToken(GeemParser.Identifer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ProcedureCallStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ResultStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ResultStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class VariableDeclarationContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifer() { return GetTokens(GeemParser.Identifer); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifer(int i) {
			return GetToken(GeemParser.Identifer, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(StatementContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		int _la;
		try {
			State = 248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				_localctx = new ProcedureCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 164;
				Match(Identifer);
				State = 165;
				Match(T__0);
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__26) | (1L << T__27) | (1L << Identifer) | (1L << Number))) != 0)) {
					{
					State = 166;
					expression(0);
					State = 171;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__1) {
						{
						{
						State = 167;
						Match(T__1);
						State = 168;
						expression(0);
						}
						}
						State = 173;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 176;
				Match(T__2);
				}
				break;
			case 2:
				_localctx = new VariableAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				Match(Identifer);
				State = 178;
				Match(T__5);
				State = 179;
				expression(0);
				}
				break;
			case 3:
				_localctx = new VariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 180;
				Match(Identifer);
				State = 181;
				Match(Identifer);
				State = 182;
				Match(T__5);
				State = 183;
				expression(0);
				}
				break;
			case 4:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 184;
				Match(T__28);
				State = 185;
				Match(T__0);
				State = 186;
				expression(0);
				State = 187;
				Match(T__2);
				State = 188;
				Match(T__3);
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << Identifer))) != 0)) {
					{
					{
					State = 189;
					statement();
					}
					}
					State = 194;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 195;
				Match(T__4);
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__29) {
					{
					{
					State = 196;
					Match(T__29);
					State = 197;
					Match(T__0);
					State = 198;
					expression(0);
					State = 199;
					Match(T__2);
					State = 200;
					Match(T__3);
					State = 204;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << Identifer))) != 0)) {
						{
						{
						State = 201;
						statement();
						}
						}
						State = 206;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 207;
					Match(T__4);
					}
					}
					State = 213;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30) {
					{
					State = 214;
					Match(T__30);
					State = 215;
					Match(T__3);
					State = 219;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << Identifer))) != 0)) {
						{
						{
						State = 216;
						statement();
						}
						}
						State = 221;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 222;
					Match(T__4);
					}
				}

				}
				break;
			case 5:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 225;
				Match(T__31);
				State = 226;
				Match(T__0);
				State = 227;
				expression(0);
				State = 228;
				Match(T__2);
				State = 229;
				Match(T__3);
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << Identifer))) != 0)) {
					{
					{
					State = 230;
					statement();
					}
					}
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 236;
				Match(T__4);
				}
				break;
			case 6:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 238;
				Match(T__32);
				State = 239;
				Match(T__6);
				}
				break;
			case 7:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 240;
				Match(T__33);
				State = 241;
				Match(T__6);
				}
				break;
			case 8:
				_localctx = new ResultStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 242;
				Match(T__34);
				State = 243;
				expression(0);
				State = 244;
				Match(T__6);
				}
				break;
			case 9:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 246;
				Match(T__35);
				State = 247;
				Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifer() { return GetToken(GeemParser.Identifer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		return datatype(0);
	}

	private DatatypeContext datatype(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DatatypeContext _localctx = new DatatypeContext(Context, _parentState);
		DatatypeContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_datatype, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 251;
			Match(Identifer);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 259;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 257;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						_localctx = new DatatypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_datatype);
						State = 253;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 254;
						Match(T__21);
						}
						break;
					case 2:
						{
						_localctx = new DatatypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_datatype);
						State = 255;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 256;
						Match(T__36);
						}
						break;
					}
					} 
				}
				State = 261;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 7: return datatype_sempred((DatatypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 25);
		case 1: return Precpred(Context, 24);
		case 2: return Precpred(Context, 23);
		case 3: return Precpred(Context, 22);
		case 4: return Precpred(Context, 21);
		case 5: return Precpred(Context, 20);
		case 6: return Precpred(Context, 19);
		case 7: return Precpred(Context, 18);
		case 8: return Precpred(Context, 17);
		case 9: return Precpred(Context, 16);
		case 10: return Precpred(Context, 15);
		case 11: return Precpred(Context, 14);
		case 12: return Precpred(Context, 13);
		case 13: return Precpred(Context, 12);
		case 14: return Precpred(Context, 11);
		case 15: return Precpred(Context, 10);
		case 16: return Precpred(Context, 9);
		case 17: return Precpred(Context, 8);
		case 18: return Precpred(Context, 7);
		}
		return true;
	}
	private bool datatype_sempred(DatatypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return Precpred(Context, 2);
		case 20: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,40,263,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,5,0,20,8,0,10,0,12,0,23,9,0,1,1,1,1,1,1,1,1,1,1,5,1,30,
		8,1,10,1,12,1,33,9,1,3,1,35,8,1,1,1,1,1,1,1,5,1,40,8,1,10,1,12,1,43,9,
		1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,5,3,59,8,3,10,
		3,12,3,62,9,3,3,3,64,8,3,1,3,1,3,1,3,5,3,69,8,3,10,3,12,3,72,9,3,1,3,1,
		3,1,4,1,4,1,4,1,4,1,4,1,4,5,4,82,8,4,10,4,12,4,85,9,4,3,4,87,8,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,98,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,157,8,4,
		10,4,12,4,160,9,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,5,6,170,8,6,10,6,12,
		6,173,9,6,3,6,175,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,5,6,191,8,6,10,6,12,6,194,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,
		203,8,6,10,6,12,6,206,9,6,1,6,1,6,5,6,210,8,6,10,6,12,6,213,9,6,1,6,1,
		6,1,6,5,6,218,8,6,10,6,12,6,221,9,6,1,6,3,6,224,8,6,1,6,1,6,1,6,1,6,1,
		6,1,6,5,6,232,8,6,10,6,12,6,235,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,3,6,249,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,258,8,7,10,7,
		12,7,261,9,7,1,7,0,2,8,14,8,0,2,4,6,8,10,12,14,0,0,307,0,21,1,0,0,0,2,
		24,1,0,0,0,4,46,1,0,0,0,6,52,1,0,0,0,8,97,1,0,0,0,10,161,1,0,0,0,12,248,
		1,0,0,0,14,250,1,0,0,0,16,20,3,4,2,0,17,20,3,6,3,0,18,20,3,2,1,0,19,16,
		1,0,0,0,19,17,1,0,0,0,19,18,1,0,0,0,20,23,1,0,0,0,21,19,1,0,0,0,21,22,
		1,0,0,0,22,1,1,0,0,0,23,21,1,0,0,0,24,25,3,14,7,0,25,34,5,1,0,0,26,31,
		3,10,5,0,27,28,5,2,0,0,28,30,3,10,5,0,29,27,1,0,0,0,30,33,1,0,0,0,31,29,
		1,0,0,0,31,32,1,0,0,0,32,35,1,0,0,0,33,31,1,0,0,0,34,26,1,0,0,0,34,35,
		1,0,0,0,35,36,1,0,0,0,36,37,5,3,0,0,37,41,5,4,0,0,38,40,3,12,6,0,39,38,
		1,0,0,0,40,43,1,0,0,0,41,39,1,0,0,0,41,42,1,0,0,0,42,44,1,0,0,0,43,41,
		1,0,0,0,44,45,5,5,0,0,45,3,1,0,0,0,46,47,3,14,7,0,47,48,5,38,0,0,48,49,
		5,6,0,0,49,50,3,8,4,0,50,51,5,7,0,0,51,5,1,0,0,0,52,53,3,14,7,0,53,54,
		5,38,0,0,54,63,5,1,0,0,55,60,3,10,5,0,56,57,5,2,0,0,57,59,3,10,5,0,58,
		56,1,0,0,0,59,62,1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,64,1,0,0,0,62,
		60,1,0,0,0,63,55,1,0,0,0,63,64,1,0,0,0,64,65,1,0,0,0,65,66,5,3,0,0,66,
		70,5,4,0,0,67,69,3,12,6,0,68,67,1,0,0,0,69,72,1,0,0,0,70,68,1,0,0,0,70,
		71,1,0,0,0,71,73,1,0,0,0,72,70,1,0,0,0,73,74,5,5,0,0,74,7,1,0,0,0,75,76,
		6,4,-1,0,76,77,5,38,0,0,77,86,5,1,0,0,78,83,3,8,4,0,79,80,5,2,0,0,80,82,
		3,8,4,0,81,79,1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,87,
		1,0,0,0,85,83,1,0,0,0,86,78,1,0,0,0,86,87,1,0,0,0,87,88,1,0,0,0,88,98,
		5,3,0,0,89,90,5,11,0,0,90,98,3,8,4,5,91,92,5,27,0,0,92,98,3,8,4,4,93,94,
		5,28,0,0,94,98,3,8,4,3,95,98,5,38,0,0,96,98,5,39,0,0,97,75,1,0,0,0,97,
		89,1,0,0,0,97,91,1,0,0,0,97,93,1,0,0,0,97,95,1,0,0,0,97,96,1,0,0,0,98,
		158,1,0,0,0,99,100,10,25,0,0,100,101,5,8,0,0,101,157,3,8,4,26,102,103,
		10,24,0,0,103,104,5,9,0,0,104,157,3,8,4,25,105,106,10,23,0,0,106,107,5,
		10,0,0,107,157,3,8,4,24,108,109,10,22,0,0,109,110,5,11,0,0,110,157,3,8,
		4,23,111,112,10,21,0,0,112,113,5,12,0,0,113,157,3,8,4,22,114,115,10,20,
		0,0,115,116,5,13,0,0,116,157,3,8,4,21,117,118,10,19,0,0,118,119,5,14,0,
		0,119,157,3,8,4,20,120,121,10,18,0,0,121,122,5,15,0,0,122,157,3,8,4,19,
		123,124,10,17,0,0,124,125,5,16,0,0,125,157,3,8,4,18,126,127,10,16,0,0,
		127,128,5,17,0,0,128,157,3,8,4,17,129,130,10,15,0,0,130,131,5,18,0,0,131,
		157,3,8,4,16,132,133,10,14,0,0,133,134,5,19,0,0,134,157,3,8,4,15,135,136,
		10,13,0,0,136,137,5,20,0,0,137,157,3,8,4,14,138,139,10,12,0,0,139,140,
		5,21,0,0,140,157,3,8,4,13,141,142,10,11,0,0,142,143,5,22,0,0,143,157,3,
		8,4,12,144,145,10,10,0,0,145,146,5,23,0,0,146,157,3,8,4,11,147,148,10,
		9,0,0,148,149,5,24,0,0,149,157,3,8,4,10,150,151,10,8,0,0,151,152,5,25,
		0,0,152,157,3,8,4,9,153,154,10,7,0,0,154,155,5,26,0,0,155,157,3,8,4,8,
		156,99,1,0,0,0,156,102,1,0,0,0,156,105,1,0,0,0,156,108,1,0,0,0,156,111,
		1,0,0,0,156,114,1,0,0,0,156,117,1,0,0,0,156,120,1,0,0,0,156,123,1,0,0,
		0,156,126,1,0,0,0,156,129,1,0,0,0,156,132,1,0,0,0,156,135,1,0,0,0,156,
		138,1,0,0,0,156,141,1,0,0,0,156,144,1,0,0,0,156,147,1,0,0,0,156,150,1,
		0,0,0,156,153,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,
		159,9,1,0,0,0,160,158,1,0,0,0,161,162,3,14,7,0,162,163,5,38,0,0,163,11,
		1,0,0,0,164,165,5,38,0,0,165,174,5,1,0,0,166,171,3,8,4,0,167,168,5,2,0,
		0,168,170,3,8,4,0,169,167,1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,
		172,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,174,166,1,0,0,0,174,175,1,
		0,0,0,175,176,1,0,0,0,176,249,5,3,0,0,177,178,5,38,0,0,178,179,5,6,0,0,
		179,249,3,8,4,0,180,181,5,38,0,0,181,182,5,38,0,0,182,183,5,6,0,0,183,
		249,3,8,4,0,184,185,5,29,0,0,185,186,5,1,0,0,186,187,3,8,4,0,187,188,5,
		3,0,0,188,192,5,4,0,0,189,191,3,12,6,0,190,189,1,0,0,0,191,194,1,0,0,0,
		192,190,1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,192,1,0,0,0,195,211,
		5,5,0,0,196,197,5,30,0,0,197,198,5,1,0,0,198,199,3,8,4,0,199,200,5,3,0,
		0,200,204,5,4,0,0,201,203,3,12,6,0,202,201,1,0,0,0,203,206,1,0,0,0,204,
		202,1,0,0,0,204,205,1,0,0,0,205,207,1,0,0,0,206,204,1,0,0,0,207,208,5,
		5,0,0,208,210,1,0,0,0,209,196,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,
		211,212,1,0,0,0,212,223,1,0,0,0,213,211,1,0,0,0,214,215,5,31,0,0,215,219,
		5,4,0,0,216,218,3,12,6,0,217,216,1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,
		0,219,220,1,0,0,0,220,222,1,0,0,0,221,219,1,0,0,0,222,224,5,5,0,0,223,
		214,1,0,0,0,223,224,1,0,0,0,224,249,1,0,0,0,225,226,5,32,0,0,226,227,5,
		1,0,0,227,228,3,8,4,0,228,229,5,3,0,0,229,233,5,4,0,0,230,232,3,12,6,0,
		231,230,1,0,0,0,232,235,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,
		1,0,0,0,235,233,1,0,0,0,236,237,5,5,0,0,237,249,1,0,0,0,238,239,5,33,0,
		0,239,249,5,7,0,0,240,241,5,34,0,0,241,249,5,7,0,0,242,243,5,35,0,0,243,
		244,3,8,4,0,244,245,5,7,0,0,245,249,1,0,0,0,246,247,5,36,0,0,247,249,5,
		7,0,0,248,164,1,0,0,0,248,177,1,0,0,0,248,180,1,0,0,0,248,184,1,0,0,0,
		248,225,1,0,0,0,248,238,1,0,0,0,248,240,1,0,0,0,248,242,1,0,0,0,248,246,
		1,0,0,0,249,13,1,0,0,0,250,251,6,7,-1,0,251,252,5,38,0,0,252,259,1,0,0,
		0,253,254,10,2,0,0,254,258,5,22,0,0,255,256,10,1,0,0,256,258,5,37,0,0,
		257,253,1,0,0,0,257,255,1,0,0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,
		1,0,0,0,260,15,1,0,0,0,261,259,1,0,0,0,24,19,21,31,34,41,60,63,70,83,86,
		97,156,158,171,174,192,204,211,219,223,233,248,257,259
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Geem.SyntaxAnalyzer
